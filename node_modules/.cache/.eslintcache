[{"E:\\Quản lí ứng dụng\\Project for CV\\apptodo\\src\\index.js":"1","E:\\Quản lí ứng dụng\\Project for CV\\apptodo\\src\\App.js":"2","E:\\Quản lí ứng dụng\\Project for CV\\apptodo\\src\\pages\\BoxTodo.js":"3","E:\\Quản lí ứng dụng\\Project for CV\\apptodo\\src\\component\\ListTodo.js":"4","E:\\Quản lí ứng dụng\\Project for CV\\apptodo\\src\\component\\ListComplete.js":"5","E:\\Quản lí ứng dụng\\Project for CV\\apptodo\\src\\component\\EditTodo.js":"6"},{"size":219,"mtime":1631605695054,"results":"7","hashOfConfig":"8"},{"size":230,"mtime":1631805137518,"results":"9","hashOfConfig":"8"},{"size":7817,"mtime":1631805303981,"results":"10","hashOfConfig":"8"},{"size":1452,"mtime":1631800611999,"results":"11","hashOfConfig":"8"},{"size":1526,"mtime":1631801471906,"results":"12","hashOfConfig":"8"},{"size":2462,"mtime":1631783304798,"results":"13","hashOfConfig":"8"},{"filePath":"14","messages":"15","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"16"},"qdmyzo",{"filePath":"17","messages":"18","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"19","messages":"20","errorCount":0,"fatalErrorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"21"},{"filePath":"22","messages":"23","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"24","messages":"25","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"26","messages":"27","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"E:\\Quản lí ứng dụng\\Project for CV\\apptodo\\src\\index.js",[],["28","29"],"E:\\Quản lí ứng dụng\\Project for CV\\apptodo\\src\\App.js",[],"E:\\Quản lí ứng dụng\\Project for CV\\apptodo\\src\\pages\\BoxTodo.js",["30","31","32","33","34"],"import { Grid, Box, Typography, Paper, InputBase, IconButton,Checkbox, makeStyles, ButtonGroup,TextField, Fade, FormControlLabel, Button, Snackbar, FormLabel } from \"@material-ui/core\"\r\nimport CardTravelIcon from '@material-ui/icons/CardTravel';\r\nimport SaveIcon from '@material-ui/icons/Save';\r\nimport ListTodo from '../component/ListTodo';\r\nimport ListComplete from '../component/ListComplete';\r\nimport EventIcon from '@material-ui/icons/Event';\r\nimport React from 'react'\r\nimport DoneAllIcon from '@material-ui/icons/DoneAll';\r\nimport { Alert } from \"@material-ui/lab\";\r\nconst useStyle= makeStyles({\r\n    lighterBox:{\r\n        '& > *':{\r\n            margin:'5px 20px',\r\n            \r\n            color:'white'\r\n        },\r\n        padding:'10px',\r\n        background:'black',\r\n        minHeight:'500px'\r\n    },\r\n    darkBox:{\r\n        padding:'10px',\r\n        '& > *':{\r\n            margin:'5px 20px',\r\n        },\r\n    },\r\n    root:{\r\n        width:'400px',\r\n        padding: '5px',\r\n        display:'flex',\r\n        alignItems:'center',\r\n        justifyContent:'center',\r\n        boxShadow: 'rgba(252, 66, 123,0.5) 0px 0px 0px 3px'\r\n    },\r\n    container:{\r\n        backgroundColor: '#f1f2f6'\r\n    },\r\n    success:{\r\n        backgroundColor:'green',\r\n        padding:10,\r\n        border:'1px solid black'\r\n    }\r\n    \r\n})\r\nexport default function BoxTodo(){\r\n    const classes = useStyle();\r\n\r\n    //--------useState--------//\r\n    const [task, setTask] = React.useState([]);\r\n    const [taskComplete, setTaskCompleted] = React.useState([]);\r\n    const [taskInput, setTaskinput] = React.useState('');\r\n    const [checked, setChecked] = React.useState(false);\r\n    const [changeTheme, setChangeTheme] = React.useState(false);\r\n    const [date, setDate]= React.useState(\"\");\r\n    const [complete, setComplete] = React.useState(true);\r\n    const [success, setSuccess] = React.useState(false);\r\n    const [theme, setTheme] = React.useState(classes.darkBox);\r\n    //--------Function-------//\r\n    const toggleTheme = ()=>{\r\n        setChangeTheme(pre => !pre);\r\n        if(theme === classes.lighterBox ){\r\n            return setTheme(pre => classes.darkBox)\r\n        }else{\r\n            return setTheme(pre => classes.lighterBox)\r\n        }\r\n    }\r\n    const addList = React.useCallback(\r\n        ()=>{\r\n            setTask([ {id:task.length +1, todo:taskInput,date: date ,isCompleted:false},...task]);\r\n            setTaskinput(\"\");\r\n            setDate('');\r\n            setSuccess((pre)=>true);\r\n        },\r\n        [task, taskInput, date],\r\n    )\r\n\r\n    const delTodo = (id)=>{\r\n        console.log('function',id);\r\n        taskComplete.map(value=>{\r\n            if(value.id == id){\r\n                taskComplete.splice(taskComplete.indexOf(value),1);\r\n                return setTaskCompleted([...taskComplete]);       \r\n            }\r\n        })\r\n        \r\n    }\r\n\r\n    const checkComplete = (id,todo, isCompleted, date) => {\r\n        if(isCompleted){\r\n            taskComplete.forEach(value => {\r\n                if(value.id == id){\r\n                    taskComplete.splice(taskComplete.indexOf(value),1);\r\n                    setTask([...task,{id: task.length+ 1, todo: todo, date:date  ,isCompleted:false }])\r\n                }\r\n            })\r\n        }else{\r\n            task.forEach(value=>{\r\n                if(value.id == id){\r\n                    task.splice(task.indexOf(value),1);\r\n                    setTaskCompleted([...taskComplete,{id:taskComplete.length+1, todo: todo,date: date, isCompleted:true}])\r\n                }\r\n            })\r\n        }\r\n    }\r\n    //----------Render--------//\r\n    return(\r\n        <Grid item>\r\n            \r\n            <Box position='relative' className={theme}>\r\n                <Typography color='secondary' align='center'  compornent='h1' variant='h5' children={<span><CardTravelIcon/> Todo List</span>}/>\r\n                <Paper className={classes.root}>\r\n                    <InputBase\r\n                        placeholder='Danh sách việc cần làm'                        \r\n                        style={{width:'90%'}}\r\n                        defaultValue=\"2017-05-24T10:30\"\r\n                        inputProps={{ 'aria-label': 'todo list' }}\r\n                        value={taskInput}                 \r\n                        onChange={(e) => setTaskinput(e.target.value)}      \r\n                    />\r\n                    <ButtonGroup type='time' className={classes.btn}>\r\n                        <IconButton color='secondary'  onClick={()=> setChecked(pre => !pre)}>\r\n                            <EventIcon />\r\n                        </IconButton>\r\n                        <IconButton color='secondary'   onClick={addList} disabled={!taskInput}>\r\n                            <SaveIcon/>\r\n                        </IconButton>                        \r\n                    </ButtonGroup>\r\n                    <Fade in={checked}>\r\n                        <Box \r\n                            position='absolute'\r\n                            top='100px'\r\n                            right='70px'\r\n                        >\r\n                            <form className={classes.container} noValidate>\r\n                                <TextField\r\n                                    id=\"datetime-local\"\r\n                                    label=\"Next appointment\"\r\n                                    type=\"datetime-local\"\r\n                                    value={date}                                    \r\n                                    onMouseLeave={() => setChecked(false)}                               \r\n                                    InputLabelProps={{\r\n                                        shrink: true,                                       \r\n                                    }}                                    \r\n                                    onChange={e => setDate(e.target.value)}\r\n                                />\r\n                            </form>\r\n                        </Box>\r\n                    </Fade>\r\n                </Paper>\r\n                <Box display='flex' justifyContent='end' alignI>\r\n                    <FormControlLabel\r\n                        control={<Checkbox color='primary' checked={changeTheme} onChange={()=> toggleTheme()} name=\"checkedA\" />}\r\n                        label=\"Nền tối\"\r\n                    />\r\n                   \r\n                </Box>\r\n                {/*-------success----------------*/}\r\n                <Snackbar open={success} autoHideDuration={2000} onClose={()=> setSuccess(false)}  >\r\n                    <Alert severity='success' anchorOrigin={{vertical:'center', horizontal:'left',}}>\r\n                        Đã thêm\r\n                    </Alert>\r\n                </Snackbar>\r\n                \r\n\r\n                <Box>\r\n                    {task.map(e =>( \r\n                        <Paper >\r\n                            <ListTodo asset={e} key={e.id} active={checkComplete}/>\r\n                        </Paper>\r\n                    ))}\r\n                </Box>\r\n\r\n                <Button\r\n                    startIcon={<DoneAllIcon/>}\r\n                    variant='outlined'\r\n                    size='small'\r\n                    onClick={()=> setComplete(pre => !pre)}\r\n                    color='primary'\r\n                >\r\n                    {`${taskComplete.length} hoàn thành`}\r\n                </Button>\r\n                <Fade in={complete}>\r\n                    <Box>\r\n                        {taskComplete.map(e => (\r\n                            <Paper >\r\n                                <ListComplete asset={e} key={e.id} active={checkComplete} delCompleted={delTodo}/>\r\n                            </Paper>\r\n                        ))}\r\n                    </Box>\r\n                </Fade>\r\n            </Box>\r\n        </Grid>\r\n    )\r\n}","E:\\Quản lí ứng dụng\\Project for CV\\apptodo\\src\\component\\ListTodo.js",[],"E:\\Quản lí ứng dụng\\Project for CV\\apptodo\\src\\component\\ListComplete.js",[],"E:\\Quản lí ứng dụng\\Project for CV\\apptodo\\src\\component\\EditTodo.js",[],{"ruleId":"35","replacedBy":"36"},{"ruleId":"37","replacedBy":"38"},{"ruleId":"39","severity":1,"message":"40","line":1,"column":149,"nodeType":"41","messageId":"42","endLine":1,"endColumn":158},{"ruleId":"43","severity":1,"message":"44","line":79,"column":31,"nodeType":"45","messageId":"46","endLine":79,"endColumn":33},{"ruleId":"47","severity":1,"message":"48","line":80,"column":25,"nodeType":"49","messageId":"50","endLine":80,"endColumn":27},{"ruleId":"47","severity":1,"message":"48","line":91,"column":29,"nodeType":"49","messageId":"50","endLine":91,"endColumn":31},{"ruleId":"47","severity":1,"message":"48","line":98,"column":29,"nodeType":"49","messageId":"50","endLine":98,"endColumn":31},"no-native-reassign",["51"],"no-negated-in-lhs",["52"],"no-unused-vars","'FormLabel' is defined but never used.","Identifier","unusedVar","array-callback-return","Array.prototype.map() expects a value to be returned at the end of arrow function.","ArrowFunctionExpression","expectedAtEnd","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","no-global-assign","no-unsafe-negation"]