{"ast":null,"code":"var _jsxFileName = \"E:\\\\Qu\\u1EA3n l\\xED \\u1EE9ng d\\u1EE5ng\\\\Project for CV\\\\apptodo\\\\src\\\\pages\\\\BoxTodo.js\",\n    _s = $RefreshSig$();\n\nimport { Grid, Box, Typography, Paper, InputBase, IconButton, makeStyles, Divider, Input, Button, Checkbox } from \"@material-ui/core\";\nimport CardTravelIcon from '@material-ui/icons/CardTravel';\nimport SaveIcon from '@material-ui/icons/Save';\nimport ListTodo from '../component/ListTodo';\nimport ListComplete from '../component/ListComplete';\nimport React from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst useStyle = makeStyles({\n  root: {\n    width: '350px',\n    padding: '5px 10px',\n    display: 'flex',\n    alignItems: 'center',\n    justifyContent: 'center',\n    boxShadow: 'rgba(252, 66, 123,0.5) 0px 0px 0px 3px'\n  }\n});\nexport default function BoxTodo() {\n  _s();\n\n  const classes = useStyle(); //--------useState--------//\n\n  const [task, setTask] = React.useState([]);\n  const [taskComplete, setTaskCompleted] = React.useState([]);\n  const [taskInput, setTaskinput] = React.useState(''); //--------Function-------//\n\n  const addList = () => {\n    setTask([{\n      id: task.length + 1,\n      todo: taskInput,\n      isCompleted: false\n    }, ...task]);\n    setTaskinput(\"\");\n  };\n\n  const checkComplete = id => {\n    task.forEach(value => {\n      if (value.id == id) {\n        setTaskCompleted([{\n          id: taskComplete.length + 1,\n          todo: value.todo,\n          isCompleted: true\n        }, ...taskComplete]);\n        task.splice(task.indexOf(value), 1);\n      }\n    }); //setTask(task.map(value => e.target.value == value.id ? console.log(\"dung\") : value));\n  }; //----------Render--------//\n\n\n  return /*#__PURE__*/_jsxDEV(Grid, {\n    item: true,\n    children: /*#__PURE__*/_jsxDEV(Box, {\n      children: [/*#__PURE__*/_jsxDEV(Typography, {\n        color: \"secondary\",\n        align: \"center\",\n        paragraph: \"true\",\n        compornent: \"h1\",\n        variant: \"h5\",\n        children: /*#__PURE__*/_jsxDEV(\"span\", {\n          children: [/*#__PURE__*/_jsxDEV(CardTravelIcon, {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 46,\n            columnNumber: 124\n          }, this), \" Todo List\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 46,\n          columnNumber: 118\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 46,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(Paper, {\n        className: classes.root,\n        children: [/*#__PURE__*/_jsxDEV(InputBase, {\n          placeholder: \"Danh s\\xE1ch vi\\u1EC7c c\\u1EA7n l\\xE0m\",\n          style: {\n            width: '90%'\n          },\n          inputProps: {\n            'aria-label': 'todo list'\n          },\n          value: taskInput,\n          onChange: e => setTaskinput(e.target.value)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 48,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(IconButton, {\n          onClick: addList,\n          children: /*#__PURE__*/_jsxDEV(SaveIcon, {\n            color: \"secondary\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 56,\n            columnNumber: 25\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 55,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 47,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(Divider, {\n        light: true\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 59,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(Box, {\n        children: task.map(e => /*#__PURE__*/_jsxDEV(Paper, {\n          children: /*#__PURE__*/_jsxDEV(ListTodo, {\n            asset: e,\n            active: checkComplete\n          }, e.id, false, {\n            fileName: _jsxFileName,\n            lineNumber: 63,\n            columnNumber: 29\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 62,\n          columnNumber: 25\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 60,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(Divider, {\n        light: true\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 67,\n        columnNumber: 17\n      }, this), console.log(taskComplete), taskComplete.map(e => /*#__PURE__*/_jsxDEV(\"h1\", {\n        children: e.todo\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 70,\n        columnNumber: 21\n      }, this)), /*#__PURE__*/_jsxDEV(Box, {\n        children: taskComplete.map(e => /*#__PURE__*/_jsxDEV(Paper, {\n          children: /*#__PURE__*/_jsxDEV(ListComplete, {\n            asset: e,\n            active: checkComplete\n          }, e.id, false, {\n            fileName: _jsxFileName,\n            lineNumber: 75,\n            columnNumber: 26\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 74,\n          columnNumber: 26\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 72,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 45,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 44,\n    columnNumber: 9\n  }, this);\n}\n\n_s(BoxTodo, \"fgodTivxzA/stqRvZJU8Oe586Y8=\", false, function () {\n  return [useStyle];\n});\n\n_c = BoxTodo;\n\nvar _c;\n\n$RefreshReg$(_c, \"BoxTodo\");","map":{"version":3,"sources":["E:/Quản lí ứng dụng/Project for CV/apptodo/src/pages/BoxTodo.js"],"names":["Grid","Box","Typography","Paper","InputBase","IconButton","makeStyles","Divider","Input","Button","Checkbox","CardTravelIcon","SaveIcon","ListTodo","ListComplete","React","useStyle","root","width","padding","display","alignItems","justifyContent","boxShadow","BoxTodo","classes","task","setTask","useState","taskComplete","setTaskCompleted","taskInput","setTaskinput","addList","id","length","todo","isCompleted","checkComplete","forEach","value","splice","indexOf","e","target","map","console","log"],"mappings":"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","sourcesContent":["import { Grid, Box, Typography, Paper, InputBase, IconButton, makeStyles, Divider, Input, Button, Checkbox } from \"@material-ui/core\"\r\nimport CardTravelIcon from '@material-ui/icons/CardTravel';\r\nimport SaveIcon from '@material-ui/icons/Save';\r\nimport ListTodo from '../component/ListTodo';\r\nimport ListComplete from '../component/ListComplete';\r\nimport React from 'react'\r\n\r\nconst useStyle= makeStyles({\r\n    root:{\r\n        width:'350px',\r\n        padding: '5px 10px',\r\n        display:'flex',\r\n        alignItems:'center',\r\n        justifyContent:'center',\r\n        boxShadow: 'rgba(252, 66, 123,0.5) 0px 0px 0px 3px'\r\n    }\r\n})\r\nexport default function BoxTodo(){\r\n    const classes = useStyle();\r\n\r\n    //--------useState--------//\r\n    const [task, setTask] = React.useState([]);\r\n    const [taskComplete, setTaskCompleted] = React.useState([]);\r\n    const [taskInput, setTaskinput] = React.useState('');\r\n\r\n    //--------Function-------//\r\n    const addList = ()=>{\r\n        setTask([ {id:task.length +1, todo:taskInput, isCompleted:false},...task]);\r\n        setTaskinput(\"\");\r\n    }\r\n\r\n    const checkComplete = (id) => {\r\n        task.forEach(value => {\r\n            if(value.id == id){\r\n                setTaskCompleted([{id: taskComplete.length+1, todo:value.todo, isCompleted:true},...taskComplete]);\r\n                task.splice(task.indexOf(value),1)\r\n            }\r\n        })\r\n        \r\n        //setTask(task.map(value => e.target.value == value.id ? console.log(\"dung\") : value));\r\n    }\r\n    //----------Render--------//\r\n    return(\r\n        <Grid item >\r\n            <Box >\r\n                <Typography color='secondary' align='center' paragraph='true' compornent='h1' variant='h5' children={<span><CardTravelIcon/> Todo List</span>}/>\r\n                <Paper className={classes.root}>\r\n                    <InputBase\r\n                        placeholder='Danh sách việc cần làm'\r\n                        style={{width:'90%'}}\r\n                        inputProps={{ 'aria-label': 'todo list' }}\r\n                        value={taskInput}                 \r\n                        onChange={(e) => setTaskinput(e.target.value)}      \r\n                    />\r\n                    <IconButton onClick={addList}>\r\n                        <SaveIcon color='secondary' />\r\n                    </IconButton>\r\n                </Paper>\r\n                <Divider light/>\r\n                <Box>\r\n                    {task.map(e =>( \r\n                        <Paper >\r\n                            <ListTodo asset={e} key={e.id} active={checkComplete}/>\r\n                        </Paper>\r\n                    ))}\r\n                </Box>\r\n                <Divider light/>\r\n                {console.log(taskComplete)}\r\n                {taskComplete.map(e => (\r\n                    <h1>{e.todo}</h1>\r\n    ))}\r\n                <Box>\r\n                    {taskComplete.map(e => (\r\n                         <Paper >\r\n                         <ListComplete asset={e} key={e.id} active={checkComplete}/>\r\n                     </Paper>\r\n                    ))}\r\n                </Box>\r\n            </Box>\r\n        </Grid>\r\n    )\r\n}"]},"metadata":{},"sourceType":"module"}