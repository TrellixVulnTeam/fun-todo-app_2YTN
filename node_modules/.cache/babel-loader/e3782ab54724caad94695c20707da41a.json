{"ast":null,"code":"var _jsxFileName = \"E:\\\\Qu\\u1EA3n l\\xED \\u1EE9ng d\\u1EE5ng\\\\Project for CV\\\\apptodo\\\\src\\\\pages\\\\BoxTodo.js\",\n    _s = $RefreshSig$();\n\nimport { Grid, Box, Typography, Paper, InputBase, IconButton, makeStyles, Divider, Input, Button, Checkbox } from \"@material-ui/core\";\nimport CardTravelIcon from '@material-ui/icons/CardTravel';\nimport SaveIcon from '@material-ui/icons/Save';\nimport ListTodo from '../component/ListTodo';\nimport ListComplete from '../component/ListComplete';\nimport React from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst useStyle = makeStyles({\n  root: {\n    width: '350px',\n    padding: '5px 10px',\n    display: 'flex',\n    alignItems: 'center',\n    justifyContent: 'center',\n    boxShadow: 'rgba(252, 66, 123,0.5) 0px 0px 0px 3px'\n  }\n});\nexport default function BoxTodo() {\n  _s();\n\n  const classes = useStyle(); //--------useState--------//\n\n  const [task, setTask] = React.useState([]);\n  const [taskComplete, setTaskCompleted] = React.useState([]);\n  const [taskInput, setTaskinput] = React.useState(''); //--------Function-------//\n\n  const addList = () => {\n    setTask([{\n      id: task.length + 1,\n      todo: taskInput,\n      isCompleted: false\n    }, ...task]);\n    setTaskinput(\"\");\n  };\n\n  const delCompleted = id => {\n    taskComplete.map(value => {\n      if (id == value.id) {\n        taskComplete.splice(taskComplete.indexOf(value), 1);\n      }\n    });\n  };\n\n  const delTodo = id => {\n    task.map(value => {\n      if (id == value.id) {\n        task.splice(task.indexOf(value), 1);\n      }\n    });\n  };\n\n  const checkComplete = (id, todo, isCompleted) => {\n    if (isCompleted) {\n      taskComplete.forEach(value => {\n        if (value.id == id) {\n          taskComplete.splice(taskComplete.indexOf(value), 1);\n          setTask([...task, {\n            id: task.length + 1,\n            todo: todo,\n            isCompleted: false\n          }]);\n        }\n      });\n    } else {\n      task.forEach(value => {\n        if (value.id == id) {\n          task.splice(task.indexOf(value), 1);\n          setTaskCompleted([...taskComplete, {\n            id: taskComplete.length + 1,\n            todo: todo,\n            isCompleted: true\n          }]);\n        }\n      });\n    }\n  }; //----------Render--------//\n\n\n  return /*#__PURE__*/_jsxDEV(Grid, {\n    item: true,\n    children: /*#__PURE__*/_jsxDEV(Box, {\n      children: [/*#__PURE__*/_jsxDEV(Typography, {\n        color: \"secondary\",\n        align: \"center\",\n        paragraph: \"true\",\n        compornent: \"h1\",\n        variant: \"h5\",\n        children: /*#__PURE__*/_jsxDEV(\"span\", {\n          children: [/*#__PURE__*/_jsxDEV(CardTravelIcon, {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 67,\n            columnNumber: 124\n          }, this), \" Todo List\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 67,\n          columnNumber: 118\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 67,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(Paper, {\n        className: classes.root,\n        children: [/*#__PURE__*/_jsxDEV(InputBase, {\n          placeholder: \"Danh s\\xE1ch vi\\u1EC7c c\\u1EA7n l\\xE0m\",\n          style: {\n            width: '90%'\n          },\n          inputProps: {\n            'aria-label': 'todo list'\n          },\n          value: taskInput,\n          onChange: e => setTaskinput(e.target.value)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 69,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(IconButton, {\n          onClick: addList,\n          children: /*#__PURE__*/_jsxDEV(SaveIcon, {\n            color: \"secondary\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 77,\n            columnNumber: 25\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 76,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 68,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(Divider, {\n        light: true\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 80,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(Box, {\n        children: task.map(e => /*#__PURE__*/_jsxDEV(Paper, {\n          children: /*#__PURE__*/_jsxDEV(ListTodo, {\n            asset: e,\n            active: checkComplete,\n            delTodo: delTodo\n          }, e.id, false, {\n            fileName: _jsxFileName,\n            lineNumber: 84,\n            columnNumber: 29\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 83,\n          columnNumber: 25\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 81,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(Divider, {\n        light: true\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 88,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(Box, {\n        children: taskComplete.map(e => /*#__PURE__*/_jsxDEV(Paper, {\n          children: /*#__PURE__*/_jsxDEV(ListComplete, {\n            asset: e,\n            active: checkComplete,\n            delTodo: delCompleted\n          }, e.id, false, {\n            fileName: _jsxFileName,\n            lineNumber: 92,\n            columnNumber: 29\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 91,\n          columnNumber: 25\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 89,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 66,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 65,\n    columnNumber: 9\n  }, this);\n}\n\n_s(BoxTodo, \"fgodTivxzA/stqRvZJU8Oe586Y8=\", false, function () {\n  return [useStyle];\n});\n\n_c = BoxTodo;\n\nvar _c;\n\n$RefreshReg$(_c, \"BoxTodo\");","map":{"version":3,"sources":["E:/Quản lí ứng dụng/Project for CV/apptodo/src/pages/BoxTodo.js"],"names":["Grid","Box","Typography","Paper","InputBase","IconButton","makeStyles","Divider","Input","Button","Checkbox","CardTravelIcon","SaveIcon","ListTodo","ListComplete","React","useStyle","root","width","padding","display","alignItems","justifyContent","boxShadow","BoxTodo","classes","task","setTask","useState","taskComplete","setTaskCompleted","taskInput","setTaskinput","addList","id","length","todo","isCompleted","delCompleted","map","value","splice","indexOf","delTodo","checkComplete","forEach","e","target"],"mappings":"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","sourcesContent":["import { Grid, Box, Typography, Paper, InputBase, IconButton, makeStyles, Divider, Input, Button, Checkbox } from \"@material-ui/core\"\r\nimport CardTravelIcon from '@material-ui/icons/CardTravel';\r\nimport SaveIcon from '@material-ui/icons/Save';\r\nimport ListTodo from '../component/ListTodo';\r\nimport ListComplete from '../component/ListComplete';\r\nimport React from 'react'\r\n\r\nconst useStyle= makeStyles({\r\n    root:{\r\n        width:'350px',\r\n        padding: '5px 10px',\r\n        display:'flex',\r\n        alignItems:'center',\r\n        justifyContent:'center',\r\n        boxShadow: 'rgba(252, 66, 123,0.5) 0px 0px 0px 3px'\r\n    }\r\n})\r\nexport default function BoxTodo(){\r\n    const classes = useStyle();\r\n\r\n    //--------useState--------//\r\n    const [task, setTask] = React.useState([]);\r\n    const [taskComplete, setTaskCompleted] = React.useState([]);\r\n    const [taskInput, setTaskinput] = React.useState('');\r\n\r\n    //--------Function-------//\r\n    const addList = ()=>{\r\n        setTask([ {id:task.length +1, todo:taskInput, isCompleted:false},...task]);\r\n        setTaskinput(\"\");\r\n    }\r\n    const delCompleted = (id)=>{\r\n        taskComplete.map(value=>{\r\n            if(id == value.id){\r\n                taskComplete.splice(taskComplete.indexOf(value),1);\r\n            }\r\n        })\r\n    }\r\n    const delTodo = (id)=>{\r\n        task.map(value=>{\r\n            if(id == value.id){\r\n                task.splice(task.indexOf(value),1)\r\n            }\r\n        })\r\n    }\r\n\r\n    const checkComplete = (id,todo,isCompleted) => {\r\n        if(isCompleted){\r\n            taskComplete.forEach(value => {\r\n                if(value.id == id){\r\n                    taskComplete.splice(taskComplete.indexOf(value),1);\r\n                    setTask([...task,{id: task.length+ 1, todo: todo, isCompleted:false }])\r\n                }\r\n            })\r\n        }else{\r\n            task.forEach(value=>{\r\n                if(value.id == id){\r\n                    task.splice(task.indexOf(value),1);\r\n                    setTaskCompleted([...taskComplete,{id:taskComplete.length+1, todo: todo, isCompleted:true}])\r\n                }\r\n            })\r\n        }\r\n    }\r\n    //----------Render--------//\r\n    return(\r\n        <Grid item >\r\n            <Box >\r\n                <Typography color='secondary' align='center' paragraph='true' compornent='h1' variant='h5' children={<span><CardTravelIcon/> Todo List</span>}/>\r\n                <Paper className={classes.root}>\r\n                    <InputBase\r\n                        placeholder='Danh sách việc cần làm'\r\n                        style={{width:'90%'}}\r\n                        inputProps={{ 'aria-label': 'todo list' }}\r\n                        value={taskInput}                 \r\n                        onChange={(e) => setTaskinput(e.target.value)}      \r\n                    />\r\n                    <IconButton onClick={addList}>\r\n                        <SaveIcon color='secondary' />\r\n                    </IconButton>\r\n                </Paper>\r\n                <Divider light/>\r\n                <Box>\r\n                    {task.map(e =>( \r\n                        <Paper >\r\n                            <ListTodo asset={e} key={e.id} active={checkComplete} delTodo={delTodo}/>\r\n                        </Paper>\r\n                    ))}\r\n                </Box>\r\n                <Divider light/>\r\n                <Box>\r\n                    {taskComplete.map(e => (\r\n                        <Paper >\r\n                            <ListComplete asset={e} key={e.id} active={checkComplete}  delTodo={delCompleted}/>\r\n                        </Paper>\r\n                    ))}\r\n                </Box>\r\n            </Box>\r\n        </Grid>\r\n    )\r\n}"]},"metadata":{},"sourceType":"module"}